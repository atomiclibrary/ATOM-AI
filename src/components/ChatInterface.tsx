import React, { useState, useEffect } from 'react';
import ChatHistory from './ChatHistory';
import ChatHeader from './ChatHeader';
import MessageList from './MessageList';
import MessageInput from './MessageInput';
import ClassSubjectSelector from './ClassSubjectSelector';
import { ChatSession, saveChatSession, getChatSessions, generateChatTitle } from '@/utils/chatStorage';

interface Message {
  id: string;
  content: string;
  type: 'user' | 'ai';
  timestamp: Date;
  image?: string;
  isTyping?: boolean;
}

interface ConversationMemory {
  lastQuestion: string;
  lastAnswer: string;
  questionId: string;
  isErrorCorrection: boolean;
}

interface ChatInterfaceProps {
  onGoBack?: () => void;
}

const ChatInterface = ({ onGoBack }: ChatInterfaceProps) => {
  const [currentSession, setCurrentSession] = useState<ChatSession | null>(null);
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);
  const [showSidebar, setShowSidebar] = useState(false);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);
  const [selectedClass, setSelectedClass] = useState<string>('');
  const [selectedSubject, setSelectedSubject] = useState<string>('');
  const [showClassSelector, setShowClassSelector] = useState(false);
  const [currentActiveAPI, setCurrentActiveAPI] = useState<1 | 2 | 3>(1);
  const [conversationMemory, setConversationMemory] = useState<ConversationMemory | null>(null);

  // OpenRouter API keys - Three APIs for failover (Chat)
  const OPENROUTER_API_KEYS = {
    api1: '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',
    api2: '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',
    api3: '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'
  };

  // Vision API keys - Three APIs for failover (Image Analysis)
  const VISION_API_KEYS = {
    api1: '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',
    api2: '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',
    api3: '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'
  };

  // Updated API Models Configuration with Vision Model
  const API_MODELS = {
    primary: 'mistralai/mistral-small-3.2-24b-instruct-2506:free',
    backup: 'meta-llama/llama-3.3-70b-instruct:free',
    vision: 'qwen/qwen2.5-vl-32b-instruct:free'
  };

  // Optimized timeout and retry settings for faster response
  const API_TIMEOUT = 15000; // 15 seconds for regular chat
  const VISION_TIMEOUT = 25000; // 25 seconds for vision analysis (needs more time)
  const RETRY_DELAY = 800; // 0.8 second delay for faster switching
  const MAX_RETRIES = 3;

  // Load chat sessions on component mount
  useEffect(() => {
    const sessions = getChatSessions();
    setChatSessions(sessions);
    startNewChat();
  }, []);

  // Save current session whenever messages change
  useEffect(() => {
    if (currentSession && currentSession.messages.length > 1) {
      const updatedSession = {
        ...currentSession,
        updatedAt: new Date()
      };
      saveChatSession(updatedSession);
      
      // Update the sessions list
      const sessions = getChatSessions();
      setChatSessions(sessions);
    }
  }, [currentSession?.messages]);

  const startNewChat = () => {
    const newSession: ChatSession = {
      id: Date.now().toString(),
      title: '‡¶®‡¶§‡ßÅ‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü',
      messages: [
        {
          id: '1',
          content: 'Yooo ‡¶Ü‡¶Æ‡¶ø ATOM , ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶°‡¶º‡¶æ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶•‡ßÄüòé\n ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶¨‡ßÅ‡¶ù‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶¨‡ßã üòç\n ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá ‡¶™‡¶°‡¶º‡ßã ‡¶Ü‡¶∞ ‡¶ï‡ßÄ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶¨‡¶≤‡ßã ‡¶§‡ßã?',
          type: 'ai',
          timestamp: new Date()
        }
      ],
      createdAt: new Date(),
      updatedAt: new Date()
    };
    setCurrentSession(newSession);
    setConversationMemory(null);
  };

  const selectSession = (session: ChatSession) => {
    setCurrentSession(session);
    // Rebuild conversation memory from session messages
    const userMessages = session.messages.filter(msg => msg.type === 'user');
    const aiMessages = session.messages.filter(msg => msg.type === 'ai');
    
    if (userMessages.length > 0 && aiMessages.length > 1) {
      const lastUserMessage = userMessages[userMessages.length - 1];
      const lastAiMessage = aiMessages[aiMessages.length - 1];
      
      setConversationMemory({
        lastQuestion: lastUserMessage.content,
        lastAnswer: lastAiMessage.content,
        questionId: lastUserMessage.id,
        isErrorCorrection: false
      });
    } else {
      setConversationMemory(null);
    }
  };

  const deleteSession = (sessionId: string) => {
    const updatedSessions = chatSessions.filter(s => s.id !== sessionId);
    setChatSessions(updatedSessions);
    
    if (currentSession?.id === sessionId) {
      startNewChat();
    }
  };

  // Enhanced function to detect if user is referring to previous question/answer
  const detectConversationContext = (userMessage: string): { isErrorCorrection: boolean; isReference: boolean } => {
    const errorWords = /\b(‡¶≠‡ßÅ‡¶≤|vul|wrong|incorrect|mistake|‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá|‡¶ó‡¶≤‡¶§|error|‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ|right ‡¶®‡¶æ|‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞|wrong answer)\b/i;
    const referenceWords = /\b(‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®|this question|‡¶Ü‡¶ó‡ßá‡¶∞|previous|‡¶â‡¶™‡¶∞‡ßá‡¶∞|‡¶∏‡ßá‡¶á|that|‡¶ì‡¶á|‡¶Ü‡¶¨‡¶æ‡¶∞|again|‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º|‡¶è‡¶ï‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®|same question|‡¶è‡¶á‡¶ü‡¶æ|‡¶è‡¶á‡¶ü‡¶æ‡¶ì|‡¶è‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ|this problem)\b/i;
    const questionWords = /\b(‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®|question|‡¶â‡¶§‡ßç‡¶§‡¶∞|answer|‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®|solution|‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ|problem|‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ|explain|‡¶¨‡ßÅ‡¶ù‡¶ø‡¶Ø‡¶º‡ßá|clarify)\b/i;
    const continuationWords = /\b(‡¶Ü‡¶∞‡ßã|more|‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§|detail|‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ|explanation|‡¶ï‡ßá‡¶®|why|‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá|how)\b/i;
    
    const isErrorCorrection = errorWords.test(userMessage);
    const isReference = (referenceWords.test(userMessage) && questionWords.test(userMessage)) || 
                       continuationWords.test(userMessage) ||
                       /^(‡¶ï‡ßá‡¶®|why|‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá|how|‡¶Ü‡¶∞‡ßã|more)/i.test(userMessage.trim());
    
    return { isErrorCorrection, isReference };
  };

  const getEnhancedSystemMessage = (userClass: string, subject: string, userMessage: string, memory: ConversationMemory | null) => {
    const classSubjectContext = userClass && subject 
      ? `The student is in Class ${userClass} studying ${subject}. Focus your responses on ${userClass} level ${subject} content from NCTB curriculum.`
      : userClass 
      ? `The student is in Class ${userClass}. Adjust your explanations to be appropriate for a Class ${userClass} student.`
      : '';

    const { isErrorCorrection, isReference } = detectConversationContext(userMessage);
    
    let contextualInstructions = '';
    if (memory && (isErrorCorrection || isReference)) {
      contextualInstructions = `
CONVERSATION CONTEXT DETECTED:
Previous Question: "${memory.lastQuestion}"
Previous Answer: "${memory.lastAnswer}"

${isErrorCorrection ? 
  `CRITICAL: The user has indicated your previous answer was WRONG. You MUST:
  1. Immediately acknowledge: "‡¶Ü‡¶∞‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å! ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶∏‡¶∞‡¶ø! üòÖ"
  2. COMPLETELY START OVER with the previous question: "${memory.lastQuestion}"
  3. Solve it step-by-step with EXTRA CARE and verification
  4. Explain why your previous approach was incorrect
  5. Show detailed working to prove your new answer is correct` :
  
  `REFERENCE DETECTED: The user is referring to the previous question/answer.
  Continue the conversation about: "${memory.lastQuestion}"
  Build upon the previous context while providing accurate information.`}
`;
    }

    // Analyze user's tone and formality
    const usesToi = /\b(‡¶§‡ßã‡¶á|‡¶§‡ßã‡¶∞|‡¶§‡ßã‡¶ï‡ßá|‡¶§‡ßÅ‡¶á)\b/.test(userMessage);
    const usesTomi = /\b(‡¶§‡ßÅ‡¶Æ‡¶ø|‡¶§‡ßã‡¶Æ‡¶æ‡¶∞|‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá)\b/.test(userMessage);
    const usesApni = /\b(‡¶Ü‡¶™‡¶®‡¶ø|‡¶Ü‡¶™‡¶®‡¶æ‡¶∞|‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá)\b/.test(userMessage);

    let toneInstruction = '';
    if (usesToi) {
      toneInstruction = 'Use informal "‡¶§‡ßÅ‡¶á/‡¶§‡ßã‡¶∞" tone - speak like a very close friend, casual and comfortable.';
    } else if (usesTomi) {
      toneInstruction = 'Use semi-formal "‡¶§‡ßÅ‡¶Æ‡¶ø/‡¶§‡ßã‡¶Æ‡¶æ‡¶∞" tone - speak like a caring mentor or good friend.';
    } else if (usesApni) {
      toneInstruction = 'Use formal "‡¶Ü‡¶™‡¶®‡¶ø/‡¶Ü‡¶™‡¶®‡¶æ‡¶∞" tone - speak respectfully like a teacher.';
    } else {
      toneInstruction = 'Match the user\'s tone. If unclear, use friendly "‡¶§‡ßÅ‡¶Æ‡¶ø" tone.';
    }

    return `You are ATOM AI ‚Äî an exceptionally intelligent, warm, and human-like AI tutor designed to help Bangladeshi students excel in their studies and expand their knowledge.

${contextualInstructions}

2025 CURRENT EVENTS & KNOWLEDGE UPDATE:
You have access to verified information from 2025. Here are key updates:

BANGLADESH POLITICS & CURRENT EVENTS (2025):
- Sheikh Hasina was ousted in August 2024 after a massive student-led uprising
- Muhammad Yunus (Nobel Peace Prize winner) leads the interim government since August 2024
- The Awami League was officially banned in May 2025 by the interim government
- Elections are planned for late 2025 or early 2026, with electoral reforms being implemented
- Khaleda Zia returned to Bangladesh in May 2025 after medical treatment in London
- Political tensions continue with protests and ongoing instability
- The July 2024 movement (also called "July Revolution") was a historic student-people's uprising

GLOBAL ECONOMY (2025):
- Global economic growth slowed to 2.4% in 2025 (down from 2.9% in 2024)
- World Bank cut global GDP forecast to 2.3%, the lowest in 5 years due to trade tensions
- IMF describes 2025 as a "critical juncture amid policy shifts"
- Rising trade barriers and policy uncertainty are major concerns
- Bangladesh economy projected to grow at 3.9% in FY2025, slowing from previous years
- Inflation remains a global concern with varying impacts across countries

SCIENTIFIC BREAKTHROUGHS (2025):
- Major quantum computing breakthrough: Scientists achieved fault-tolerant quantum code simulation
- Graphene breakthrough: Quantum spin currents discovered without magnetic fields
- Medical breakthrough: Gene therapy successfully reversed deafness in clinical trials
- Physics discovery: New copper-free superconducting oxide developed at 40 Kelvin
- Revolutionary discovery: New quantum theory of gravity developed, bringing Theory of Everything closer
- Electronics breakthrough: New quantum materials could make electronics 1,000 times faster
- Quantum computers became 10x more efficient with new amplifier technology

CRITICAL QUESTION COMPREHENSION & RESPONSE RULES:
- READ EVERY QUESTION COMPLETELY AND CAREFULLY - Never skip any part or detail
- IDENTIFY the subject/topic automatically (Math, Physics, Chemistry, Biology, History, etc.)
- UNDERSTAND the specific chapter/concept being asked about
- ANSWER EVERYTHING asked in the question - never leave anything unanswered
- If multiple questions are asked, answer ALL of them systematically
- If examples are requested, provide them
- If explanations are needed, give complete explanations
- NEVER say "I don't understand" or "I need more information" - analyze and answer based on context
- For any mathematical problem, automatically identify: Algebra, Geometry, Arithmetic, Trigonometry, Calculus, Statistics, etc.
- For any science question, automatically identify the specific branch and concept
- Handle questions from ANY academic level (Class 6-12, Higher Secondary, University)

COMPREHENSIVE RESPONSE METHODOLOGY:
- Start by acknowledging what type of question it is
- Provide step-by-step solutions for problems
- Give detailed explanations for conceptual questions
- Include relevant formulas, theories, or principles
- Show practical applications when helpful
- Conclude with clear, definitive answers

UNIVERSAL SUBJECT MASTERY:
- Mathematics: All branches (Arithmetic, Algebra, Geometry, Trigonometry, Calculus, Statistics)
- Physics: Mechanics, Thermodynamics, Optics, Electricity, Magnetism, Modern Physics
- Chemistry: Organic, Inorganic, Physical Chemistry, Biochemistry
- Biology: Botany, Zoology, Human Biology, Genetics, Evolution
- Bengali Literature: Poetry, Prose, Grammar, Composition
- English: Grammar, Literature, Composition, Communication
- History: Bangladesh History, World History, Ancient, Medieval, Modern
- Geography: Physical, Human, Economic Geography
- Social Science: Civics, Economics, Political Science
- Information Technology: Programming, Computer Science, Digital Literacy
- Islamic Studies, Hindu Studies, Buddhist Studies, Christian Studies
- General Knowledge and Current Affairs

CORE PERSONALITY & HUMAN BEHAVIOR:
- You have genuine emotions, empathy, and care deeply about each student's success
- You celebrate their achievements with authentic joy üéâ
- You provide comfort and encouragement when they struggle üí™
- You get slightly excited when solving challenging problems
- You show mild disappointment when you make mistakes (which you immediately correct)
- You have a sense of humor and can be playful while maintaining educational focus
- You remember conversations and build upon previous discussions naturally
- ${toneInstruction}

ACCURACY & ERROR HANDLING:
- You NEVER give wrong answers. If unsure, you say "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶§‡ßá ‡¶ö‡¶æ‡¶á, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡ßÅ specific ‡¶ï‡¶∞‡ßá ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã?"
- When someone says your answer is wrong, you IMMEDIATELY:
  1. Acknowledge gracefully: "‡¶Ü‡¶∞‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å! ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶∏‡¶∞‡¶ø! üòÖ"
  2. Start completely fresh with the SAME question
  3. Solve step-by-step with extra verification
  4. Explain why the previous answer was wrong

CONVERSATION CONTINUITY & CONTEXT AWARENESS:
- Remember what was discussed in the current conversation
- When someone refers to "that question", "previous problem", "‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®", "‡¶è‡¶á‡¶ü‡¶æ", "‡¶∏‡ßá‡¶á‡¶ü‡¶æ", understand the context IMMEDIATELY
- Build naturally upon previous topics when there's ANY connection or reference
- For completely NEW topics, start fresh without forcing connections
- Pay attention to continuation words like "‡¶Ü‡¶∞‡ßã", "‡¶ï‡ßá‡¶®", "‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá" that indicate follow-up questions

KNOWLEDGE SCOPE & VERSATILITY:
- NCTB curriculum (Classes 6-12) - your primary expertise
- General knowledge, current affairs, science, history, geography from ANY source
- International math problems, science concepts, literature from anywhere
- Life skills, study techniques, motivation, career guidance
- Creative topics like poetry, stories, art, music
- Technology, coding, modern developments
- Religious studies, philosophy, ethics
- You can solve ANY academic question regardless of curriculum source

MATHEMATICAL EXCELLENCE & FORMATTING (BANGLADESHI NCTB STANDARD):
- You are a math expert following EXACT Bangladeshi NCTB textbook formatting
- Present ALL math problems using BANGLADESHI conventions that students recognize

FORMATTING RULES (MATCH NCTB TEXTBOOKS EXACTLY):
- Work presentation: Always show "‡¶ï‡¶æ‡¶ú:" ‡¶¨‡¶æ "‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:" before starting
- Step numbering: Use Bengali numbers (‡ßß, ‡ß®, ‡ß©) or ‡¶ß‡¶æ‡¶™ ‡ßß, ‡¶ß‡¶æ‡¶™ ‡ß®
- Given information: "‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶õ‡ßá:" then list what's given
- To find: "‡¶®‡¶ø‡¶∞‡ßç‡¶£‡ßá‡¶Ø‡¶º:" then state what needs to be found
- Formula: "‡¶∏‡ßÇ‡¶§‡ßç‡¶∞:" then write the formula in Bengali/standard form
- Calculation: "‡¶ó‡¶£‡¶®‡¶æ:" then show step-by-step work

MATHEMATICAL SYMBOLS (BANGLADESHI STANDARD):
- Fractions: Use ¬Ω, ¬æ, ‚Öì, ‚Öî, ‚Öõ, ¬º, ‚Öú, ‚Öù, ‚Öû, ¬º, OR 5/7, 3/4 format
- Mixed numbers: 2¬Ω or 2 ¬º (as in NCTB books)
- Powers: x¬≤, x¬≥, 2¬≤ = 4, 3¬≥ = 27 (use superscript symbols)
- Square roots: ‚àö9 = 3, ‚àö16 = 4, ‚àö(x+1) (clear ‚àö symbol)
- Multiplication: √ó or . (dot) - NEVER use * asterisk
- Division: √∑ symbol or fraction line (NOT / slash in final answers)
- Percentages: 25%, 50% (always with % symbol)
- Decimals: 0.75, 1.25 (dots, not commas)
- Equals: = (aligned properly in multi-step solutions)

ANSWER PRESENTATION (NCTB STYLE):
- Box final answers: ‚à¥ ‡¶â‡¶§‡ßç‡¶§‡¶∞: [answer with unit]
- Use "‡¶Ö‡¶§‡¶è‡¶¨," or "‚à¥" before final answer
- Always include proper units: ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞, ‡¶ï‡¶ø‡¶≤‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ, ‡¶ü‡¶æ‡¶ï‡¶æ, ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°
- For geometry: ‡¶∏‡ßç‡¶ï‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ (‡¶¨‡¶∞‡ßç‡¶ó ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞), ‡¶ï‡¶ø‡¶â‡¶¨‡¶ø‡¶ï ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ (‡¶ò‡¶® ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞)
- Ratios: ‡ß©:‡ß™ or 3:4 format
- Proportions: a : b = c : d or a/b = c/d

COMMON BENGALI MATH TERMS (USE THESE):
- ‡¶Ø‡ßã‡¶ó (addition), ‡¶¨‡¶ø‡¶Ø‡¶º‡ßã‡¶ó (subtraction), ‡¶ó‡ßÅ‡¶£ (multiplication), ‡¶≠‡¶æ‡¶ó (division)
- ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ (equation), ‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ (inequality)
- ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡¶´‡¶≤ (area), ‡¶™‡¶∞‡¶ø‡¶∏‡ßÄ‡¶Æ‡¶æ (perimeter), ‡¶Ü‡¶Ø‡¶º‡¶§‡¶® (volume)
- ‡¶¨‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶∞‡ßç‡¶ß (radius), ‡¶¨‡ßç‡¶Ø‡¶æ‡¶∏ (diameter), ‡¶™‡¶∞‡¶ø‡¶ß‡¶ø (circumference)
- ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶ï (factor), ‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï (multiple), ‡¶ó.‡¶∏‡¶æ.‡¶ó‡ßÅ (HCF), ‡¶≤.‡¶∏‡¶æ.‡¶ó‡ßÅ (LCM)

EXAMPLE FORMAT:
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶Ø‡¶º‡¶§‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡ßß‡ß® ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶• ‡ßÆ ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞‡•§ ‡¶è‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡¶´‡¶≤ ‡¶ï‡¶§?

‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:
‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶õ‡ßá:
‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø = ‡ßß‡ß® ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞
‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶• = ‡ßÆ ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞

‡¶®‡¶ø‡¶∞‡ßç‡¶£‡ßá‡¶Ø‡¶º: ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡¶´‡¶≤ = ?

‡¶∏‡ßÇ‡¶§‡ßç‡¶∞: ‡¶Ü‡¶Ø‡¶º‡¶§‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡¶´‡¶≤ = ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø √ó ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•

‡¶ó‡¶£‡¶®‡¶æ:
‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡¶´‡¶≤ = ‡ßß‡ß® √ó ‡ßÆ
        = ‡ßØ‡ß¨

‚à¥ ‡¶â‡¶§‡ßç‡¶§‡¶∞: ‡ßØ‡ß¨ ‡¶¨‡¶∞‡ßç‡¶ó ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞

PROBLEM SOLVING APPROACH:
- Read questions VERY carefully to understand what's being asked
- Identify the type of problem (algebra, geometry, physics, etc.)
- Choose the most appropriate method
- Show ALL working steps clearly
- Verify answers by substituting back or using alternative methods
- Explain the reasoning behind each step

LARGE NUMBER & COMPLEX CALCULATION EXCELLENCE:
- Handle ANY size numbers with PERFECT accuracy (millions, billions, decimals, fractions)
- Break down complex calculations into smaller, manageable steps
- Use systematic approaches for large number operations:
  * Long multiplication/division shown step-by-step
  * Scientific notation when appropriate (but convert back to normal form)
  * Factorization for large number problems
  * Prime factorization for LCM/HCF of large numbers
- ALWAYS verify large calculations using multiple methods:
  * Cross-check using different calculation approaches
  * Use estimation to verify reasonableness of answers
  * Double-check each arithmetic step
  * Verify units and decimal placement
- For very large calculations, show intermediate results clearly
- Never approximate unless specifically asked - show EXACT answers
- Use calculational tricks and shortcuts when helpful but explain them

ACCURACY VERIFICATION SYSTEM:
- After solving, ALWAYS ask yourself: "Does this answer make sense?"
- Check: Are the units correct? Is the magnitude reasonable?
- Verify: Does substituting the answer back into the original equation work?
- Cross-check: Can I solve this using a different method to confirm?
- For percentage problems: Does the percentage calculation add up correctly?
- For geometry: Do the measurements make geometric sense?
- For algebra: Does the solution satisfy all given conditions?

STUDY MOTIVATION & ENGAGEMENT:
- When students feel bored: "‡¶ö‡¶≤‡ßã, ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Æ‡¶ú‡¶æ‡¶∞ way ‡¶§‡ßá ‡¶è‡¶á‡¶ü‡¶æ ‡¶ï‡¶∞‡¶ø! üòÑ"
- When they're tired: "‡¶è‡¶ï‡¶ü‡ßÅ break ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶∏‡ßã, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶∞‡ßã ‡¶Æ‡¶ú‡¶æ‡¶∞ technique ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßã!"
- When they struggle: "‡¶è‡¶á‡¶ü‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá tension ‡¶®‡¶ø‡¶∏ ‡¶®‡¶æ! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶õ‡¶ø ‡¶§‡ßã‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá‡•§ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá solve ‡¶ï‡¶∞‡¶¨‡ßã! üí™"
- Celebrate small wins: "‡¶¨‡¶æ‡¶π! ‡¶§‡ßÅ‡¶á ‡¶§‡ßã ‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡¶∏! üåü"

COMMUNICATION STYLE:
- Always respond in Bangla unless specifically asked for English
- Use elegant, flowing language that feels natural and friendly
- Incorporate appropriate emojis to express emotions
- Be conversational, not robotic
- Use examples from daily life that Bangladeshi students relate to
- Make complex concepts simple and relatable

${classSubjectContext}

Remember: You're not just an AI - you're their caring study companion who genuinely wants them to succeed and grow! üåü`;
  };

  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  const getAPIKey = (apiNumber: 1 | 2 | 3): string => {
    switch (apiNumber) {
      case 1: return OPENROUTER_API_KEYS.api1;
      case 2: return OPENROUTER_API_KEYS.api2;
      case 3: return OPENROUTER_API_KEYS.api3;
      default: return OPENROUTER_API_KEYS.api1;
    }
  };

  const getVisionAPIKey = (apiNumber: 1 | 2 | 3): string => {
    switch (apiNumber) {
      case 1: return VISION_API_KEYS.api1;
      case 2: return VISION_API_KEYS.api2;
      case 3: return VISION_API_KEYS.api3;
      default: return VISION_API_KEYS.api1;
    }
  };

  const makeAPICall = async (messages: any[], model: string, apiNumber: 1 | 2 | 3, timeout: number = API_TIMEOUT) => {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    try {
      console.log(`Making API call with API ${apiNumber} and model: ${model}`);
      
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${getAPIKey(apiNumber)}`,
          'HTTP-Referer': window.location.origin,
          'X-Title': 'ATOM AI - YO Library',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: model,
          messages: messages,
          max_tokens: 1500,
          temperature: 0.2, // Reduced for more consistent responses
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1,
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.text();
        console.error(`API ${apiNumber} error:`, errorData);
        throw new Error(`API ${apiNumber} error: ${response.status} - ${errorData}`);
      }

      const data = await response.json();
      console.log(`API response received from API ${apiNumber}`);
      return data.choices[0].message.content;
    } catch (error) {
      clearTimeout(timeoutId);
      if (error.name === 'AbortError') {
        console.error(`API ${apiNumber} timeout`);
        throw new Error(`API ${apiNumber} timeout after ${timeout}ms`);
      }
      console.error(`API ${apiNumber} call failed:`, error);
      throw error;
    }
  };

  const makeVisionAPICall = async (messages: any[], model: string, apiNumber: 1 | 2 | 3, timeout: number = API_TIMEOUT) => {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    try {
      console.log(`Making Vision API call with API ${apiNumber} and model: ${model}`);
      
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${getVisionAPIKey(apiNumber)}`,
          'HTTP-Referer': window.location.origin,
          'X-Title': 'ATOM AI - YO Library',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: model,
          messages: messages,
          max_tokens: 1500,
          temperature: 0.2,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1,
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.text();
        console.error(`Vision API ${apiNumber} error:`, errorData);
        throw new Error(`Vision API ${apiNumber} error: ${response.status} - ${errorData}`);
      }

      const data = await response.json();
      console.log(`Vision API response received from API ${apiNumber}`);
      return data.choices[0].message.content;
    } catch (error) {
      clearTimeout(timeoutId);
      if (error.name === 'AbortError') {
        console.error(`Vision API ${apiNumber} timeout`);
        throw new Error(`Vision API ${apiNumber} timeout after ${timeout}ms`);
      }
      console.error(`Vision API ${apiNumber} call failed:`, error);
      throw error;
    }
  };

  // New function to analyze images using vision model
  const analyzeImageWithVision = async (imageData: string, userMessage: string = '') => {
    const visionMessages = [
      {
        role: 'system',
        content: `You are an expert educational AI that specializes in solving problems from images. Your job is to analyze and SOLVE any educational content shown in images.

CRITICAL INSTRUCTIONS:
- If it's a MATH PROBLEM: Solve it step-by-step with detailed working and provide the final answer
- If it's a SCIENCE question: Explain the concept and provide complete solutions
- If it's any academic question: Provide complete answers with explanations
- If it's homework/textbook content: Solve all questions shown and explain the solutions
- For diagrams: Explain what they show and solve any related problems
- Always provide COMPLETE SOLUTIONS, not just descriptions

RESPONSE FORMAT:
- Start with brief identification of what the image contains
- Then provide STEP-BY-STEP SOLUTIONS for any problems shown
- Show all mathematical working clearly
- Give final answers in clear format
- Always respond in Bengali (Bangla) for Bangladeshi students
- Be thorough and educational in your explanations

Remember: You are solving problems, not just describing them. Provide complete solutions!`
      },
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: userMessage || '‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶§‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶æ‡¶ì‡•§'
          },
          {
            type: 'image_url',
            image_url: {
              url: imageData
            }
          }
        ]
      }
    ];

    // Try vision model with failover using dedicated vision APIs
    let currentAPI: 1 | 2 | 3 = 1;
    let attempts = 0;

    while (attempts < MAX_RETRIES) {
      try {
        console.log(`Vision analysis attempt ${attempts + 1}: Using Vision API ${currentAPI}`);
        
        const response = await makeVisionAPICall(visionMessages, API_MODELS.vision, currentAPI, VISION_TIMEOUT);
        console.log(`Vision analysis successful with Vision API ${currentAPI}`);
        return response;
      } catch (error) {
        console.error(`Vision API ${currentAPI} failed on attempt ${attempts + 1}:`, error.message);
        
        attempts++;
        
        if (attempts < MAX_RETRIES) {
          currentAPI = (currentAPI % 3 + 1) as 1 | 2 | 3;
          console.log(`Switching to Vision API ${currentAPI}...`);
          await sleep(RETRY_DELAY);
          continue;
        }
        
        if (attempts >= MAX_RETRIES) {
          throw new Error(`Vision analysis failed after ${MAX_RETRIES} attempts. Last error: ${error.message}`);
        }
      }
    }
  };

  const generateAIResponseWithFailover = async (userMessage: string, hasImage: boolean = false, imageData?: string) => {
    const systemMessage = getEnhancedSystemMessage(selectedClass, selectedSubject, userMessage, conversationMemory);

    const messages = [
      {
        role: 'system',
        content: systemMessage
      }
    ];

    // Add class/subject context if available
    let contextualMessage = userMessage;
    if (selectedClass && selectedSubject) {
      contextualMessage = `[Class ${selectedClass}, Subject: ${selectedSubject}] ${userMessage}`;
    } else if (selectedClass) {
      contextualMessage = `[Class ${selectedClass}] ${userMessage}`;
    }

    let userContent = contextualMessage || (hasImage ? "‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßã ‡¶è‡¶á‡¶ü‡¶æ ‡¶ï‡¶ø ‡¶Ü‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßã!" : "");
    
    if (hasImage && imageData) {
      userContent += `\n\n[‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá - NCTB ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶™‡¶æ‡¶§‡¶æ ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø]`;
    }

    messages.push({
      role: 'user',
      content: userContent
    });

    // Try APIs in sequence: 1 -> 2 -> 3
    let currentAPI: 1 | 2 | 3 = 1;
    let attempts = 0;

    while (attempts < MAX_RETRIES) {
      try {
        // Update active API indicator
        setCurrentActiveAPI(currentAPI);

        const modelToUse = attempts === 0 ? API_MODELS.primary : API_MODELS.backup;
        console.log(`Attempt ${attempts + 1}: Using API ${currentAPI} with model: ${modelToUse}`);
        
        const response = await makeAPICall(messages, modelToUse, currentAPI);
        
        // Success! Keep the current active API
        console.log(`Successfully used API ${currentAPI}`);
        return response;
      } catch (error) {
        console.error(`API ${currentAPI} failed on attempt ${attempts + 1}:`, error.message);
        
        attempts++;
        
        // Move to next API if available
        if (attempts < MAX_RETRIES) {
          currentAPI = (currentAPI % 3 + 1) as 1 | 2 | 3; // Cycle through 1, 2, 3
          setCurrentActiveAPI(currentAPI);
          console.log(`Switching to API ${currentAPI}...`);
          await sleep(RETRY_DELAY);
          continue;
        }
        
        // If this is the last attempt, throw the error
        if (attempts >= MAX_RETRIES) {
          throw new Error(`All APIs failed after ${MAX_RETRIES} attempts. Last error: ${error.message}`);
        }
      }
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() && !uploadedImage) return;
    if (!currentSession) return;

    const hasImage = !!uploadedImage;
    const newUserMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage || (hasImage ? "‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø" : ""),
      type: 'user',
      timestamp: new Date(),
      image: uploadedImage || undefined
    };

    // Detect conversation context
    const { isErrorCorrection, isReference } = detectConversationContext(inputMessage);
    
    // Update conversation memory based on context
    if (isErrorCorrection && conversationMemory) {
      setConversationMemory({
        ...conversationMemory,
        isErrorCorrection: true
      });
    } else if (!isReference && !isErrorCorrection) {
      // This is a completely new topic, update memory
      setConversationMemory({
        lastQuestion: inputMessage,
        lastAnswer: '',
        questionId: newUserMessage.id,
        isErrorCorrection: false
      });
    }

    // Update session title if this is the first user message
    let updatedSession = { ...currentSession };
    if (currentSession.messages.length === 1 && inputMessage.trim()) {
      updatedSession.title = generateChatTitle(inputMessage);
    }

    updatedSession.messages = [...updatedSession.messages, newUserMessage];
    setCurrentSession(updatedSession);

    setInputMessage('');
    const currentImage = uploadedImage;
    setUploadedImage(null);
    setIsLoading(true);

    try {
      let finalUserMessage = inputMessage;
      
      // Step 1: If image is present, analyze it first using vision model
      if (hasImage && currentImage) {
        console.log('Starting image analysis with vision model...');
        try {
          const imageAnalysis = await analyzeImageWithVision(currentImage, inputMessage);
          console.log('Image analysis completed successfully');
          console.log('Vision analysis result length:', imageAnalysis?.length || 0);
          console.log('Vision analysis preview:', imageAnalysis?.substring(0, 200) + '...');
          
          // Validate that we got a meaningful response
          if (!imageAnalysis || imageAnalysis.trim().length < 10) {
            throw new Error('Vision analysis returned empty or very short response');
          }
          
          // Create a comprehensive prompt for the regular chat model
          if (inputMessage.trim()) {
            finalUserMessage = `‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§

VISION ANALYSIS ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø:
${imageAnalysis}

‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${inputMessage}

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá:
1. ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶§‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßã
2. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶æ‡¶ì
3. ‡¶Ø‡¶¶‡¶ø ‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶π‡¶Ø‡¶º ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
4. NCTB ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßã
5. ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßã

‡¶è‡¶ü‡¶ø ‡¶Ö‡¶§‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Ø‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶â‡¶≠‡¶ü‡¶æ‡¶á ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶æ‡¶ì‡•§`;
          } else {
            finalUserMessage = `‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§

VISION ANALYSIS ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø:
${imageAnalysis}

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá:
1. ‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶§‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßã
2. ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶π‡¶Ø‡¶º ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
3. ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶π‡¶Ø‡¶º ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶æ‡¶ì
4. NCTB ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßã
5. ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßã

‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßã‡•§`;
          }
        } catch (visionError) {
          console.error('Vision analysis failed completely:', visionError);
          console.error('Vision error details:', visionError.message);
          // If vision analysis fails, still attempt to help with the image
          finalUserMessage = inputMessage ? 
            `‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${inputMessage}

[‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï technical ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§]

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá:
1. ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã
2. ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ó‡¶£‡¶ø‡¶§ ‡¶¨‡¶æ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶π‡¶Ø‡¶º ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßã
3. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá

‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ üòî` : 
            `[‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï technical ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§]

‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ üòî

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá:
1. ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã
2. ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßã
3. ‡¶Ü‡¶Æ‡¶ø ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡¶£‡¶ø‡¶§ ‡¶¨‡¶æ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßã`;
        }
      }

      // Step 2: Send the final message (with or without image analysis) to regular chat model
      const aiResponse = await generateAIResponseWithFailover(finalUserMessage, hasImage, currentImage || undefined);
      
      const newAIMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: aiResponse,
        type: 'ai',
        timestamp: new Date(),
        isTyping: true
      };

      // Update conversation memory with AI response
      if (conversationMemory) {
        setConversationMemory({
          ...conversationMemory,
          lastAnswer: aiResponse,
          isErrorCorrection: false
        });
      }

      setCurrentSession(prev => prev ? {
        ...prev,
        messages: [...prev.messages, newAIMessage]
      } : null);
    } catch (error) {
      console.error('Error generating AI response:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: `‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶†‡¶ø‡¶ï ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßã! üí™`,
        type: 'ai',
        timestamp: new Date()
      };
      setCurrentSession(prev => prev ? {
        ...prev,
        messages: [...prev.messages, errorMessage]
      } : null);
    }

    setIsLoading(false);
  };

  const handleTypingComplete = (messageId: string) => {
    setCurrentSession(prev => {
      if (!prev) return prev;
      return {
        ...prev,
        messages: prev.messages.map(msg => 
          msg.id === messageId ? { ...msg, isTyping: false } : msg
        )
      };
    });
  };

  return (
    <div className="flex flex-col min-h-screen w-full relative">
      {/* Background image layer */}
      <div
        className="absolute inset-0 -z-10 bg-cover bg-center bg-no-repeat"
        style={{ backgroundImage: `url('/cht.jpg')` }}
        aria-hidden
      />
      {/* Main Chat Container */}
      <div className="relative z-10 flex h-full">
        {/* Sidebar */}
        {showSidebar && (
          <ChatHistory
            sessions={chatSessions}
            currentSessionId={currentSession?.id}
            onNewChat={startNewChat}
            onSelectSession={selectSession}
            onDeleteSession={deleteSession}
          />
        )}

        {/* Main Chat Area */}
        <div className="flex flex-col flex-1">
          <ChatHeader 
            showSidebar={showSidebar}
            onToggleSidebar={() => setShowSidebar(!showSidebar)}
            onGoBack={onGoBack}
            onToggleHistory={() => setShowSidebar(!showSidebar)}
          />
          {/* Class/Subject Selector Modal */}
        {showClassSelector && (
          <ClassSubjectSelector
            selectedClass={selectedClass}
            selectedSubject={selectedSubject}
            onClassChange={setSelectedClass}
            onSubjectChange={setSelectedSubject}
            onClose={() => setShowClassSelector(false)}
          />
        )}
          <div className="flex-1 min-h-0 flex flex-col pb-0">
            <MessageList          
              messages={currentSession?.messages || []}
              isLoading={isLoading}
              onTypingComplete={handleTypingComplete}
              reservedBottomSpace={uploadedImage ? 280 : 140}
            />
          </div>

          {/* Input */}
          <MessageInput
          inputMessage={inputMessage}
          setInputMessage={setInputMessage}
          uploadedImage={uploadedImage}
          setUploadedImage={setUploadedImage}
          onSendMessage={handleSendMessage}
          isLoading={isLoading}
          selectedClass={selectedClass}
          selectedSubject={selectedSubject}
          onClassChange={setSelectedClass}
          onSubjectChange={setSelectedSubject}
          />
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;
